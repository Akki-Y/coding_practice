Insertion Sort :
=> We assume that first element is already sorted then, we select all unsorted elements. 
=> If unsorted element is greater than first element (sorted element) swap to right otherwise left.
        
Time Complexity : Big - O(n) notation

Steps: 

1. Assume, If the first element in the array, it is already sorted. 
2. Move to the next element and store it separately in key (temp_value).
3. Now, First two elements are sorted. Take the third element and compare it with the elements on the left of it.
4. Similarly, place every unsorted element as its correct position.

RULE : Checks the next element, and comparing previous elements.

How iteration Works :

     0  1  2  3  4  5
Ex : 7, 2, 6, 0, 3, 1

Assume sorted = 7
Unsorted = 2, 6, 0, 3, 1

Rule : if 0 > 1 is true we should swap 

# 0 > 1 , 1 > 2, 2 > 3, 3 > 4

temp = 7,
7 > 2 (T) swap [2, 7, 6, 0, 3, 1]

temp = 2,
7 > 6 => [2, 6, 7, 0, 3, 1]

temp = 6,   # compares previous by decrement 
7 > 0 => [2, 6, 0, 7, 3, 1]
6 > 0 => [2, 0, 6, 7, 3, 1]
2 > 0 => [0, 2, 6, 7, 3, 1]

temp = 3,
7 > 3 , 6 > 3
=> [0, 2, 3, 6, 7, 1]

temp = 1
7 > 1, 6 > 1, 3 > 1, 2 > 1
=> [0, 1, 2, 3, 6, 7]

